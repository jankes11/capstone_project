# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found here
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint 

  build_pushImage:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run:
          name: install curl
          command: |
            apk add --update curl
            
      - setup_remote_docker
      - run:
          name: build docker image
          command: |
            docker build . -t jankes11/capstone-${CIRCLE_WORKFLOW_ID:0:7}
            docker image ls
      - run:
          name: push to dockerhub
          command: |
            docker login -u jankes11 -p yankee1979D!
            docker image push jankes11/capstone-${CIRCLE_WORKFLOW_ID:0:7}

  create_cluster:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run:
          name: install curl
          command: |
            apk add --update curl
      - setup_remote_docker
      - run:
          name: create eks cluster
          command: |
            eksctl create cluster --name capstone --region=us-east-2 [--profile <profile-name>]

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
  delay:
    executor: aws-eks/python3
    steps:
      - run:
          command: |
            sleep 540
          name: Delay cluster deletion

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0


workflows:
  deployment:
    jobs:
      - create-small-cluster:
          cluster-name: eks-demo-deployment
      - delay:
          requires:
            - create-small-cluster
      - aws-eks/delete-cluster:
          cluster-name: eks-capstone
          requires:
            - delay


  