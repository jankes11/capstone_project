version: 2.1
#
commands:
  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install 
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            apt install -y nodejs
  install_aws_eks:
    description: Install eksctl 
    steps:
      - run:
          name: Install eksctl 
          command: |
            mkdir -p src
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C src
            chmod +x src/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
            fi
                $SUDO mv src/eksctl /usr/local/bin/
                rmdir src
  install_kubectl:
    description: Install kubectl
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

jobs:
  build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found here
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint 

  build_pushImage:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - run:
          name: install curl
          command: |
            apk add --update curl
            
      - setup_remote_docker
      - run:
          name: build docker image
          command: |
            docker logout
            docker build -t capstone .
            docker tag capstone jankes11/capstone:latest
            docker image ls
      - run:
          name: push to dockerhub
          command: |
            docker login -u "$DOCKER_USR" -p "$DOCKER_PSWRD" docker.io
            docker push jankes11/capstone:latest
#
  create-eks-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            apk add --update tar gzip nodejs npm curl
      - install_awscli
      - install_aws_eks
      - install_kubectl
      - run:
          name: Create AWS EKS cluster
          command: |
            eksctl create cluster --name capstone --region us-east-1 --zones us-east-1a,us-east-1b,us-east-1c,us-east-1d
            eksctl utils describe-stacks --region us-east-1 --cluster=capstone
            eksctl get cluster --name=capstone --region=us-east-1

  test-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: <<parameters.cluster-name >>
      - run:
          name: kube cluster
          command: |
            kubectl get services

  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: ${AWS_DEFAULT_REGION}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone


  verify-cluster:
    executor: aws-eks/python3
    parameters: 
      cluster-name:
        description: |
          capstone
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: ${AWS_DEFAULT_REGION}
      - run:
          name: Check Cluster status
          command: |
            kubectl get nodes
            kubectl get all
            kubectl get services
            kubectl get deployments




orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2
 


workflows:
  deployment:
    jobs:
#      - build
#      - build_pushImage:
#          requires:
#            - build
#      - create-eks-cluster:
#          requires:
#            - build_pushImage
#      - test-cluster:
#          cluster-name: capstone
#          requires:
#            - create-eks-cluster
      - deploy-cluster:
          cluster-name: capstone
#          requires:
#            - test-cluster
      - verify-cluster:
          cluster-name: capstone
          requires:
            - deploy-cluster


  
